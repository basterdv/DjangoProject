"""
Django settings for DjangoProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import logging
from pathlib import Path

from django.conf.urls.static import static
from django.template.context_processors import media

logger = logging.getLogger(__name__)

# Получаем секрет
amvera_var = os.environ.get("AMVERA",'')
secret_key = os.environ.get("SECRET_KEY")

if amvera_var == '1':
    logger.info("AMVERA environment variable set to 1. Работаю в облаке Амвера")
    SECRET_KEY = secret_key
    # DEBUG = False
else:
    logger.info("AMVERA environment variable set to 0. Работаю локально")
    SECRET_KEY = "django-insecure-rq&+8@6!b^m_8p(16iu^8o8#jnprr0i7v4ux_%u-qi36$+mu@)"
    # DEBUG = True

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-rq&+8@6!b^m_8p(16iu^8o8#jnprr0i7v4ux_%u-qi36$+mu@)"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = amvera_var == '1'
DEBUG = False

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'advert-baster.amvera.io',
    'http://advert-baster.amvera.io',
    'https://advert-baster.amvera.io',
]

CSRF_TRUSTED_ORIGINS = [
    'http://advert-baster.amvera.io',
    'https://advert-baster.amvera.io',
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    'fontawesomefree',
    # "debug_toolbar",

    'main',
    'goods',
    'users',
    'orders',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",

    "whitenoise.middleware.WhiteNoiseMiddleware",

    # "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "DjangoProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates']
        ,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                'django.template.context_processors.debug',
            ],
        },
    },
]

WSGI_APPLICATION = "DjangoProject.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
if amvera_var == '1':
    db_path = '/data/db.sqlite3'
else:
    db_path = BASE_DIR / "db.sqlite3"

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        # "NAME": BASE_DIR / "db.sqlite3",
        "NAME": db_path,
    }
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    # бекенд классической аутентификации, чтобы работала авторизация через обычный логин и пароль

)

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ru-ru"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = BASE_DIR / "static"

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'data/static')
# ]
# STATICFILES_DIRS = [
#     BASE_DIR / 'static/'
#     ]

MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR / 'data/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# AUTH_USER_MODEL = 'exchange_things.CustomUser'
AUTH_USER_MODEL = 'users.CustomUser'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# CRISPY_TEMPLATE_PACK = 'bootstrap4'

# LOGIN_URL = 'login'


SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Использование базы данных для сессий
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'  # Использует кэш для хранения сессий
# SESSION_ENGINE = 'django.contrib.sessions.backends.file'  # Использует файлы для хранения сессий
# SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # Использует кэшированную базу данных для хранения сессий
SESSION_COOKIE_AGE = 1209600  # Время жизни сессии в секундах (2 недели)
SESSION_COOKIE_SECURE = False  # Установите True для HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'  # Настройка SameSite для сессионных cookie

INTERNAL_IPS = [
    '127.0.0.1',
]
